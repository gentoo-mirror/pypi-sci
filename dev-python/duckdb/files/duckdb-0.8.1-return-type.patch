From fbbc5dab21c6333c52fca2cbe2116516076d403f Mon Sep 17 00:00:00 2001
From: Tishj <t_b@live.nl>
Date: Fri, 30 Jun 2023 14:19:22 +0200
Subject: [PATCH] add conversion from Value instance, + also add the option to
 convert 'tuple' to a STRUCT value

---
 tools/pythonpkg/pyduckdb/__init__.py          | 61 +++++++++++++++++++
 .../import_cache/modules/pyduckdb_module.hpp  |  2 +
 .../duckdb_python/python_conversion.hpp       |  2 +
 .../src/native/python_conversion.cpp          | 51 +++++++++++++++-
 4 files changed, 115 insertions(+), 1 deletion(-)
 create mode 100644 tools/pythonpkg/pyduckdb/__init__.py

diff --git a/tools/pythonpkg/pyduckdb/__init__.py b/tools/pythonpkg/pyduckdb/__init__.py
new file mode 100644
index 0000000000..a7ddf482ef
--- /dev/null
+++ b/pyduckdb/__init__.py
@@ -0,0 +1,61 @@
+from .value.constant import (
+    Value,
+    NullValue,
+    BooleanValue,
+    UnsignedBinaryValue,
+    UnsignedShortValue,
+    UnsignedIntegerValue,
+    UnsignedLongValue,
+    BinaryValue,
+    ShortValue,
+    IntegerValue,
+    LongValue,
+    HugeIntegerValue,
+    FloatValue,
+    DoubleValue,
+    DecimalValue,
+    StringValue,
+    UUIDValue,
+    BitValue,
+    BlobValue,
+    DateValue,
+    IntervalValue,
+    TimestampValue,
+    TimestampSecondValue,
+    TimestampMilisecondValue,
+    TimestampNanosecondValue,
+    TimestampTimeZoneValue,
+    TimeValue,
+    TimeTimeZoneValue
+)
+
+__all__ = [
+    "Value",
+    "NullValue",
+    "BooleanValue",
+    "UnsignedBinaryValue",
+    "UnsignedShortValue",
+    "UnsignedIntegerValue",
+    "UnsignedLongValue",
+    "BinaryValue",
+    "ShortValue",
+    "IntegerValue",
+    "LongValue",
+    "HugeIntegerValue",
+    "FloatValue",
+    "DoubleValue",
+    "DecimalValue",
+    "StringValue",
+    "UUIDValue",
+    "BitValue",
+    "BlobValue",
+    "DateValue",
+    "IntervalValue",
+    "TimestampValue",
+    "TimestampSecondValue",
+    "TimestampMilisecondValue",
+    "TimestampNanosecondValue",
+    "TimestampTimeZoneValue",
+    "TimeValue",
+    "TimeTimeZoneValue"
+]
diff --git a/src/include/duckdb_python/import_cache/modules/pyduckdb_module.hpp b/src/include/duckdb_python/import_cache/modules/pyduckdb_module.hpp
index 254fbb2a63..e21ac3ffa9 100644
--- a/src/include/duckdb_python/import_cache/modules/pyduckdb_module.hpp
+++ b/src/include/duckdb_python/import_cache/modules/pyduckdb_module.hpp
@@ -35,10 +35,12 @@ public:
 	}
 	virtual void LoadSubtypes(PythonImportCache &cache) override {
 		filesystem.LoadModule("pyduckdb.filesystem", cache);
+		value.LoadAttribute("Value", cache, *this);
 	}
 
 public:
 	PyDuckDBFileSystemCacheItem filesystem;
+	PythonImportCacheItem value;
 };
 
 } // namespace duckdb
diff --git a/src/include/duckdb_python/python_conversion.hpp b/src/include/duckdb_python/python_conversion.hpp
index 655e3a8f12..995540d91c 100644
--- a/src/include/duckdb_python/python_conversion.hpp
+++ b/src/include/duckdb_python/python_conversion.hpp
@@ -36,9 +36,11 @@ enum class PythonObjectType {
 	MemoryView,
 	Bytes,
 	List,
+	Tuple,
 	Dict,
 	NdArray,
 	NdDatetime,
+	Value
 };
 
 PythonObjectType GetPythonObjectType(py::handle &ele);
diff --git a/src/native/python_conversion.cpp b/src/native/python_conversion.cpp
index 4983faa802..8355233bfd 100644
--- a/src/native/python_conversion.cpp
+++ b/src/native/python_conversion.cpp
@@ -156,6 +156,30 @@ Value TransformDictionaryToMap(const PyDictionary &dict, const LogicalType &targ
 	return Value::MAP(ListType::GetChildType(map_type), std::move(elements));
 }
 
+Value TransformTupleToStruct(py::handle ele, const LogicalType &target_type = LogicalType::UNKNOWN) {
+	auto tuple = py::cast<py::tuple>(ele);
+	auto size = py::len(tuple);
+
+	D_ASSERT(target_type.id() == LogicalTypeId::STRUCT);
+	auto child_types = StructType::GetChildTypes(target_type);
+	auto child_count = child_types.size();
+	if (size != child_count) {
+		throw InvalidInputException("Tried to create a STRUCT value from a tuple containing %d elements, but the "
+		                            "STRUCT consists of %d children",
+		                            size, child_count);
+	}
+	child_list_t<Value> children;
+	for (idx_t i = 0; i < child_count; i++) {
+		auto &type = child_types[i].second;
+		auto &name = StructType::GetChildName(target_type, i);
+		auto element = py::handle(tuple[i]);
+		auto converted_value = TransformPythonValue(element, type);
+		children.emplace_back(make_pair(std::move(name), std::move(converted_value)));
+	}
+	auto result = Value::STRUCT(std::move(children));
+	return result;
+}
+
 Value TransformListValue(py::handle ele, const LogicalType &target_type = LogicalType::UNKNOWN) {
 	auto size = py::len(ele);
 
@@ -298,14 +322,18 @@ PythonObjectType GetPythonObjectType(py::handle &ele) {
 		return PythonObjectType::MemoryView;
 	} else if (py::isinstance<py::bytes>(ele)) {
 		return PythonObjectType::Bytes;
-	} else if (py::isinstance<py::list>(ele) || py::isinstance<py::tuple>(ele)) {
+	} else if (py::isinstance<py::list>(ele)) {
 		return PythonObjectType::List;
+	} else if (py::isinstance<py::tuple>(ele)) {
+		return PythonObjectType::Tuple;
 	} else if (py::isinstance<py::dict>(ele)) {
 		return PythonObjectType::Dict;
 	} else if (py::isinstance(ele, import_cache.numpy().ndarray())) {
 		return PythonObjectType::NdArray;
 	} else if (py::isinstance(ele, import_cache.numpy().datetime64())) {
 		return PythonObjectType::NdDatetime;
+	} else if (py::isinstance(ele, import_cache.pyduckdb().value())) {
+		return PythonObjectType::Value;
 	} else {
 		return PythonObjectType::Other;
 	}
@@ -395,12 +423,33 @@ Value TransformPythonValue(py::handle ele, const LogicalType &target_type, bool
 			return TransformDictionary(dict);
 		}
 	}
+	case PythonObjectType::Tuple: {
+		switch (target_type.id()) {
+		case LogicalTypeId::STRUCT:
+			return TransformTupleToStruct(ele, target_type);
+		default:
+			return TransformListValue(ele, target_type);
+		}
+	}
 	case PythonObjectType::NdArray:
 	case PythonObjectType::NdDatetime:
 		return TransformPythonValue(ele.attr("tolist")(), target_type, nan_as_null);
+	case PythonObjectType::Value: {
+		// Extract the internal object and the type from the Value instance
+		auto object = ele.attr("object");
+		auto type = ele.attr("type");
+		shared_ptr<DuckDBPyType> internal_type;
+		if (!py::try_cast<shared_ptr<DuckDBPyType>>(type, internal_type)) {
+			string actual_type = py::str(type.get_type());
+			throw InvalidInputException("object has to be a list of DuckDBPyType's, not '%s'", actual_type);
+		}
+		return TransformPythonValue(object, internal_type->Type());
+	}
 	case PythonObjectType::Other:
 		throw NotImplementedException("Unable to transform python value of type '%s' to DuckDB LogicalType",
 		                              py::str(ele.get_type()).cast<string>());
+	default:
+		throw InternalException("Object type recognized but not implemented!");
 	}
 }
 
-- 
2.40.0

